package com.smurfhouse.web.rest;

import com.smurfhouse.SmurfHouseApp;
import com.smurfhouse.domain.House;
import com.smurfhouse.repository.HouseRepository;
import com.smurfhouse.repository.search.HouseSearchRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


/**
 * Test class for the HouseResource REST controller.
 *
 * @see HouseResource
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = SmurfHouseApp.class)
@WebAppConfiguration
@IntegrationTest
public class HouseResourceIntTest {

    private static final String
    private static final String
    private static final String
    private static final String

    private static final BigDecimal DEFAULT_PRICE = new BigDecimal(1);
    private static final BigDecimal UPDATED_PRICE = new BigDecimal(2);

    private static final LocalDate DEFAULT_START_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_START_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final LocalDate DEFAULT_END_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_END_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final Integer DEFAULT_METERS = 1;
    private static final Integer UPDATED_METERS = 2;

    private static final Integer DEFAULT_NUMROOMS = 1;
    private static final Integer UPDATED_NUMROOMS = 2;
    private static final Integer DEFAULT_FLOOR = 1;
    private static final Integer UPDATED_FLOOR = 2;
    private static final String
    private static final String

    private static final Boolean DEFAULT_ELEVATOR = false;
    private static final Boolean UPDATED_ELEVATOR = true;

    private static final Boolean DEFAULT_FACING_OUTSIDE = false;
    private static final Boolean UPDATED_FACING_OUTSIDE = true;

    private static final Boolean DEFAULT_GARAGE = false;
    private static final Boolean UPDATED_GARAGE = true;

    @Inject
    private HouseRepository houseRepository;

    @Inject
    private HouseSearchRepository houseSearchRepository;

    @Inject
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Inject
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    private MockMvc restHouseMockMvc;

    private House house;

    @PostConstruct
    public void setup() {
        MockitoAnnotations.initMocks(this);
        HouseResource houseResource = new HouseResource();
        ReflectionTestUtils.setField(houseResource, "houseSearchRepository", houseSearchRepository);
        ReflectionTestUtils.setField(houseResource, "houseRepository", houseRepository);
        this.restHouseMockMvc = MockMvcBuilders.standaloneSetup(houseResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    @Before
    public void initTest() {
        houseSearchRepository.deleteAll();
        house = new House();
        house.setKey(DEFAULT_KEY);
        house.setExternalLink(DEFAULT_EXTERNAL_LINK);
        house.setPrice(DEFAULT_PRICE);
        house.setStartDate(DEFAULT_START_DATE);
        house.setEndDate(DEFAULT_END_DATE);
        house.setMeters(DEFAULT_METERS);
        house.setNumrooms(DEFAULT_NUMROOMS);
        house.setFloor(DEFAULT_FLOOR);
        house.setDetails(DEFAULT_DETAILS);
        house.setElevator(DEFAULT_ELEVATOR);
        house.setFacingOutside(DEFAULT_FACING_OUTSIDE);
        house.setGarage(DEFAULT_GARAGE);
    }

    @Test
    @Transactional
    public void createHouse() throws Exception {
        int databaseSizeBeforeCreate = houseRepository.findAll().size();

        // Create the House

        restHouseMockMvc.perform(post("/api/houses")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(house)))
                .andExpect(status().isCreated());

        // Validate the House in the database
        List<House> houses = houseRepository.findAll();
        assertThat(houses).hasSize(databaseSizeBeforeCreate + 1);
        House testHouse = houses.get(houses.size() - 1);
        assertThat(testHouse.getKey()).isEqualTo(DEFAULT_KEY);
        assertThat(testHouse.getExternalLink()).isEqualTo(DEFAULT_EXTERNAL_LINK);
        assertThat(testHouse.getPrice()).isEqualTo(DEFAULT_PRICE);
        assertThat(testHouse.getStartDate()).isEqualTo(DEFAULT_START_DATE);
        assertThat(testHouse.getEndDate()).isEqualTo(DEFAULT_END_DATE);
        assertThat(testHouse.getMeters()).isEqualTo(DEFAULT_METERS);
        assertThat(testHouse.getNumrooms()).isEqualTo(DEFAULT_NUMROOMS);
        assertThat(testHouse.getFloor()).isEqualTo(DEFAULT_FLOOR);
        assertThat(testHouse.getDetails()).isEqualTo(DEFAULT_DETAILS);
        assertThat(testHouse.isElevator()).isEqualTo(DEFAULT_ELEVATOR);
        assertThat(testHouse.isFacingOutside()).isEqualTo(DEFAULT_FACING_OUTSIDE);
        assertThat(testHouse.isGarage()).isEqualTo(DEFAULT_GARAGE);

        // Validate the House in ElasticSearch
        House houseEs = houseSearchRepository.findOne(testHouse.getId());
        assertThat(houseEs).isEqualToComparingFieldByField(testHouse);
    }

    @Test
    @Transactional
    public void checkKeyIsRequired() throws Exception {
        int databaseSizeBeforeTest = houseRepository.findAll().size();
        // set the field null
        house.setKey(null);

        // Create the House, which fails.

        restHouseMockMvc.perform(post("/api/houses")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(house)))
                .andExpect(status().isBadRequest());

        List<House> houses = houseRepository.findAll();
        assertThat(houses).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void checkExternalLinkIsRequired() throws Exception {
        int databaseSizeBeforeTest = houseRepository.findAll().size();
        // set the field null
        house.setExternalLink(null);

        // Create the House, which fails.

        restHouseMockMvc.perform(post("/api/houses")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(house)))
                .andExpect(status().isBadRequest());

        List<House> houses = houseRepository.findAll();
        assertThat(houses).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void getAllHouses() throws Exception {
        // Initialize the database
        houseRepository.saveAndFlush(house);

        // Get all the houses
        restHouseMockMvc.perform(get("/api/houses?sort=id,desc"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.[*].id").value(hasItem(house.getId().intValue())))
                .andExpect(jsonPath("$.[*].key").value(hasItem(DEFAULT_KEY.toString())))
                .andExpect(jsonPath("$.[*].externalLink").value(hasItem(DEFAULT_EXTERNAL_LINK.toString())))
                .andExpect(jsonPath("$.[*].price").value(hasItem(DEFAULT_PRICE.intValue())))
                .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
                .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
                .andExpect(jsonPath("$.[*].meters").value(hasItem(DEFAULT_METERS)))
                .andExpect(jsonPath("$.[*].numrooms").value(hasItem(DEFAULT_NUMROOMS)))
                .andExpect(jsonPath("$.[*].floor").value(hasItem(DEFAULT_FLOOR.toString())))
                .andExpect(jsonPath("$.[*].details").value(hasItem(DEFAULT_DETAILS.toString())))
                .andExpect(jsonPath("$.[*].elevator").value(hasItem(DEFAULT_ELEVATOR.booleanValue())))
                .andExpect(jsonPath("$.[*].facingOutside").value(hasItem(DEFAULT_FACING_OUTSIDE.booleanValue())))
                .andExpect(jsonPath("$.[*].garage").value(hasItem(DEFAULT_GARAGE.booleanValue())));
    }

    @Test
    @Transactional
    public void getHouse() throws Exception {
        // Initialize the database
        houseRepository.saveAndFlush(house);

        // Get the house
        restHouseMockMvc.perform(get("/api/houses/{id}", house.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.id").value(house.getId().intValue()))
            .andExpect(jsonPath("$.key").value(DEFAULT_KEY.toString()))
            .andExpect(jsonPath("$.externalLink").value(DEFAULT_EXTERNAL_LINK.toString()))
            .andExpect(jsonPath("$.price").value(DEFAULT_PRICE.intValue()))
            .andExpect(jsonPath("$.startDate").value(DEFAULT_START_DATE.toString()))
            .andExpect(jsonPath("$.endDate").value(DEFAULT_END_DATE.toString()))
            .andExpect(jsonPath("$.meters").value(DEFAULT_METERS))
            .andExpect(jsonPath("$.numrooms").value(DEFAULT_NUMROOMS))
            .andExpect(jsonPath("$.floor").value(DEFAULT_FLOOR.toString()))
            .andExpect(jsonPath("$.details").value(DEFAULT_DETAILS.toString()))
            .andExpect(jsonPath("$.elevator").value(DEFAULT_ELEVATOR.booleanValue()))
            .andExpect(jsonPath("$.facingOutside").value(DEFAULT_FACING_OUTSIDE.booleanValue()))
            .andExpect(jsonPath("$.garage").value(DEFAULT_GARAGE.booleanValue()));
    }

    @Test
    @Transactional
    public void getNonExistingHouse() throws Exception {
        // Get the house
        restHouseMockMvc.perform(get("/api/houses/{id}", Long.MAX_VALUE))
                .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateHouse() throws Exception {
        // Initialize the database
        houseRepository.saveAndFlush(house);
        houseSearchRepository.save(house);
        int databaseSizeBeforeUpdate = houseRepository.findAll().size();

        // Update the house
        House updatedHouse = new House();
        updatedHouse.setId(house.getId());
        updatedHouse.setKey(UPDATED_KEY);
        updatedHouse.setExternalLink(UPDATED_EXTERNAL_LINK);
        updatedHouse.setPrice(UPDATED_PRICE);
        updatedHouse.setStartDate(UPDATED_START_DATE);
        updatedHouse.setEndDate(UPDATED_END_DATE);
        updatedHouse.setMeters(UPDATED_METERS);
        updatedHouse.setNumrooms(UPDATED_NUMROOMS);
        updatedHouse.setFloor(UPDATED_FLOOR);
        updatedHouse.setDetails(UPDATED_DETAILS);
        updatedHouse.setElevator(UPDATED_ELEVATOR);
        updatedHouse.setFacingOutside(UPDATED_FACING_OUTSIDE);
        updatedHouse.setGarage(UPDATED_GARAGE);

        restHouseMockMvc.perform(put("/api/houses")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(updatedHouse)))
                .andExpect(status().isOk());

        // Validate the House in the database
        List<House> houses = houseRepository.findAll();
        assertThat(houses).hasSize(databaseSizeBeforeUpdate);
        House testHouse = houses.get(houses.size() - 1);
        assertThat(testHouse.getKey()).isEqualTo(UPDATED_KEY);
        assertThat(testHouse.getExternalLink()).isEqualTo(UPDATED_EXTERNAL_LINK);
        assertThat(testHouse.getPrice()).isEqualTo(UPDATED_PRICE);
        assertThat(testHouse.getStartDate()).isEqualTo(UPDATED_START_DATE);
        assertThat(testHouse.getEndDate()).isEqualTo(UPDATED_END_DATE);
        assertThat(testHouse.getMeters()).isEqualTo(UPDATED_METERS);
        assertThat(testHouse.getNumrooms()).isEqualTo(UPDATED_NUMROOMS);
        assertThat(testHouse.getFloor()).isEqualTo(UPDATED_FLOOR);
        assertThat(testHouse.getDetails()).isEqualTo(UPDATED_DETAILS);
        assertThat(testHouse.isElevator()).isEqualTo(UPDATED_ELEVATOR);
        assertThat(testHouse.isFacingOutside()).isEqualTo(UPDATED_FACING_OUTSIDE);
        assertThat(testHouse.isGarage()).isEqualTo(UPDATED_GARAGE);

        // Validate the House in ElasticSearch
        House houseEs = houseSearchRepository.findOne(testHouse.getId());
        assertThat(houseEs).isEqualToComparingFieldByField(testHouse);
    }

    @Test
    @Transactional
    public void deleteHouse() throws Exception {
        // Initialize the database
        houseRepository.saveAndFlush(house);
        houseSearchRepository.save(house);
        int databaseSizeBeforeDelete = houseRepository.findAll().size();

        // Get the house
        restHouseMockMvc.perform(delete("/api/houses/{id}", house.getId())
                .accept(TestUtil.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk());

        // Validate ElasticSearch is empty
        boolean houseExistsInEs = houseSearchRepository.exists(house.getId());
        assertThat(houseExistsInEs).isFalse();

        // Validate the database is empty
        List<House> houses = houseRepository.findAll();
        assertThat(houses).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchHouse() throws Exception {
        // Initialize the database
        houseRepository.saveAndFlush(house);
        houseSearchRepository.save(house);

        // Search the house
        restHouseMockMvc.perform(get("/api/_search/houses?query=id:" + house.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.[*].id").value(hasItem(house.getId().intValue())))
            .andExpect(jsonPath("$.[*].key").value(hasItem(DEFAULT_KEY.toString())))
            .andExpect(jsonPath("$.[*].externalLink").value(hasItem(DEFAULT_EXTERNAL_LINK.toString())))
            .andExpect(jsonPath("$.[*].price").value(hasItem(DEFAULT_PRICE.intValue())))
            .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
            .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
            .andExpect(jsonPath("$.[*].meters").value(hasItem(DEFAULT_METERS)))
            .andExpect(jsonPath("$.[*].numrooms").value(hasItem(DEFAULT_NUMROOMS)))
            .andExpect(jsonPath("$.[*].floor").value(hasItem(DEFAULT_FLOOR.toString())))
            .andExpect(jsonPath("$.[*].details").value(hasItem(DEFAULT_DETAILS.toString())))
            .andExpect(jsonPath("$.[*].elevator").value(hasItem(DEFAULT_ELEVATOR.booleanValue())))
            .andExpect(jsonPath("$.[*].facingOutside").value(hasItem(DEFAULT_FACING_OUTSIDE.booleanValue())))
            .andExpect(jsonPath("$.[*].garage").value(hasItem(DEFAULT_GARAGE.booleanValue())));
    }
}
